"""
Django settings for final_pjt project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from celery.schedules import crontab
from allauth.account import app_settings as allauth_account_settings

# MySql 사용시 조건부 해결용
# ACCOUNT_EMAILADDRESS_MODEL = 'accounts.CustomEmailAddress'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(DEBUG=(bool, True))
environ.Env.read_env(env_file=os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")
FINLIFE_API_KEY = env("FINLIFE_API_KEY")
YOUTUBE_KEY = env("YOUTUBE_KEY")
KAKAO_REST_API_KEY = env("KAKAO_REST_API_KEY")
KIS_APP_KEY = env("KIS_APP_KEY")
KIS_APP_SECRET = env("KIS_APP_SECRET")
OPENAI_API_KEY = env("OPENAI_API_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 전체 허용
ALLOWED_HOSTS = ["*"]

AUTH_USER_MODEL = "accounts.User"

REST_AUTH = {
    "REGISTER_SERIALIZER": "accounts.serializers.CustomRegisterSerializer",
    "USER_DETAILS_SERIALIZER": "accounts.serializers.CustomUserDetailsSerializer",
}


# 이메일 백엔드: 실제 이메일 발송 대신 콘솔 출력
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# 이메일 인증 요구 여부: 테스트 단계에서는 꺼두기
ACCOUNT_EMAIL_VERIFICATION = "none"  # 'mandatory' → 'none'

# Application definition

INSTALLED_APPS = [
    "articles",
    "accounts",
    "financial_products",
    "search_youtubes",
    "maps",
    "suggests",
    "django_celery_results",
    "django_celery_beat",
    "drf_yasg",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "corsheaders",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# celery 설정 (이하 3가지)
# 메시지 브로커 (Redis) URL
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")

# 결과 저장소: Django DB (Cloud SQL)
CELERY_RESULT_BACKEND = "django-db"

# 시간대 일치
CELERY_TIMEZONE = "Asia/Seoul"


SITE_ID = 1


REST_FRAMEWORK = {
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
    ],
    # permission
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://localhost:6379",  # celery 자동화
    "http://127.0.0.1:6379",  # celery 자동화
]


ROOT_URLCONF = "final_pjt.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "final_pjt.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# MySQL 사용
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


DB_PASS = env("POSTGRES_PASSWORD")
DB_NAME = env("POSTGRES_DB")
DB_USER = env("POSTGRES_USER")
ASIA_HOST = env("FINAL_AISA_HOST")


# PostgreSQL
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": f"{DB_NAME}",
        "USER": f"{DB_USER}",
        "PASSWORD": f"{DB_PASS}",
        "HOST": f"{ASIA_HOST}",
        "PORT": "5432",
    }
}

# MySQL
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": "Test",
#         "USER": "testuser",
#         "PASSWORD": f"{DB_PASS}",
#         "HOST": "34.10.106.248",  # docker-compose 서비스 이름
#         "PORT": "3306",
#         "OPTIONS": {"charset": "utf8mb4"},
#     }
# }

# ACCOUNT_LOGIN_METHOD = "username"
ACCOUNT_LOGIN_METHOD = "username_email"  # 유저네임 및 이메일로 로그인 가능

ACCOUNT_UNIQUE_EMAIL = True  # 이메일 중복 허용 안 함

ACCOUNT_SIGNUP_FIELDS = ["email", "username", "password1", "password2"]

ACCOUNT_SIGNUP_FIELDS_CONFIG = {
    "username": {"required": True},
    "email": {"required": True},
}


# DB 데이터 저장 작업 자동화
CELERY_BEAT_SCHEDULE = {
    "fetch-deposit": {
        "task": "financial_products.tasks.task_upsert_deposit",
        "schedule": 30.0,  # 초 단위: 300초=5분
    },
    "fetch-saving": {
        "task": "financial_products.tasks.task_upsert_saving",
        "schedule": 30.0,  # 초 단위: 300초=5분
    },
}


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}
